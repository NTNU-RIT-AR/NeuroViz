
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async currentState() : Promise<AppState> {
    return await TAURI_INVOKE("current_state");
},
async getIpAddress() : Promise<string> {
    return await TAURI_INVOKE("get_ip_address");
},
async getParameters() : Promise<Parameter[]> {
    return await TAURI_INVOKE("get_parameters");
},
/**
 * Set a parameter in live view
 */
async setLiveParameter(parameter: ParameterKey, value: number) : Promise<null> {
    return await TAURI_INVOKE("set_live_parameter", { parameter, value });
},
/**
 * Get a parameter in live view
 */
async getLiveParameter(parameter: ParameterKey) : Promise<number> {
    return await TAURI_INVOKE("get_live_parameter", { parameter });
},
/**
 * Retrieve a preset by file name
 */
async getPreset(sluggedPresetName: string) : Promise<Preset> {
    return await TAURI_INVOKE("get_preset", { sluggedPresetName });
},
async getAllPresets() : Promise<WithKey<Preset>[]> {
    return await TAURI_INVOKE("get_all_presets");
},
/**
 * List all presets
 */
async listPresets() : Promise<string[]> {
    return await TAURI_INVOKE("list_presets");
},
/**
 * Save current live parameters to a preset
 */
async createPreset(presetName: string) : Promise<null> {
    return await TAURI_INVOKE("create_preset", { presetName });
},
async deletePreset(sluggedName: string) : Promise<null> {
    return await TAURI_INVOKE("delete_preset", { sluggedName });
},
/**
 * Retrieve a preset
 */
async getExperiment(sluggedName: string) : Promise<Experiment> {
    return await TAURI_INVOKE("get_experiment", { sluggedName });
},
/**
 * List all experiments
 */
async listExperiments() : Promise<string[]> {
    return await TAURI_INVOKE("list_experiments");
},
/**
 * Create a new experiment
 */
async createExperiment(experimentInitData: CreateExperiment) : Promise<string> {
    return await TAURI_INVOKE("create_experiment", { experimentInitData });
},
/**
 * Get all experiments
 */
async getExperiments() : Promise<WithKey<Experiment>[]> {
    return await TAURI_INVOKE("get_experiments");
},
async startExperiment(experimentKey: string, resultName: string, obeserverId: number, note: string) : Promise<null> {
    return await TAURI_INVOKE("start_experiment", { experimentKey, resultName, obeserverId, note });
},
/**
 * Exit the current experiment early
 */
async exitExperiment() : Promise<void> {
    await TAURI_INVOKE("exit_experiment");
},
/**
 * Answer the current experiment prompt
 */
async answerExperiment(answer: ExperimentAnswer) : Promise<null> {
    return await TAURI_INVOKE("answer_experiment", { answer });
},
/**
 * Swap the current preset in the experiment
 */
async swapPreset() : Promise<null> {
    return await TAURI_INVOKE("swap_preset");
}
}

/** user-defined events **/


export const events = __makeEvents__<{
connectionEvent: ConnectionEvent,
stateEvent: StateEvent
}>({
connectionEvent: "connection-event",
stateEvent: "state-event"
})

/** user-defined constants **/



/** user-defined types **/

export type AppState = ({ kind: "live_view" } & ParameterValues) | ({ kind: "experiment" } & ExperimentState)
export type Choice = { a: string; b: string }
export type ConnectionEvent = { is_connected: boolean }
export type CreateExperiment = (
/**
 * Rating between 1-5
 */
{ experiment_type: "rating"; order: string[] } | 
/**
 * Choose between two options
 */
{ experiment_type: "choice"; choices: Choice[] }) & { name: string; presets: string[] }
export type CurrentPreset = "A" | "B"
export type Experiment = (
/**
 * Rating between 1-5
 */
{ experiment_type: "rating"; order: string[] } | 
/**
 * Choose between two options
 */
{ experiment_type: "choice"; choices: Choice[] }) & { name: string; presets: Partial<{ [key in string]: Preset }> }
export type ExperimentAnswer = { experiment_type: "choice" } | { experiment_type: "rating"; value: number }
export type ExperimentResult = ({ experiment_type: "rating"; ratings: OutcomeRating[] } | { experiment_type: "choice"; choices: OutcomeChoice[] }) & { name: string; time: string; observer_id: number; note: string; presets: Partial<{ [key in string]: Preset }> }
export type ExperimentState = { experiment_key: string; result_key: string; experiment: Experiment; experiment_result: ExperimentResult; current_index: number; choice_current_preset: CurrentPreset }
export type OutcomeChoice = { a: string; b: string; selected: string; time: string; duration_on_a: number; duration_on_b: number; duration: number }
export type OutcomeRating = { preset: string; rank: number; time: string; duration: number }
export type Parameter = { key: ParameterKey; name: string }
export type ParameterKey = "transparency" | "see_through" | "outline"
export type ParameterValues = { transparency: number; see_through: number; outline: number }
export type Preset = { name: string; parameters: ParameterValues }
export type StateEvent = { state: AppState }
export type WithKey<T> = { key: string; value: T }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
